load "lib/main/nat-plus"
load "lib/main/nat-minus"
load "lib/main/nat-less"
load "vector_2d"
load "types"

datatype Row := nilr | (consr N Row)

datatype Matrix := nilM | (consM Row Matrix)

module Matrix{

#****************************************************************************
	#-- function that sets at row i anc column j
	declare set: [Matrix N N] -> Matrix

    #--function that deletes from row i and column j
    declare delete: [Matrix N N] -> Matrix    

    #--function that checks if all rows have an assigned column
    declare complete: [Matrix] -> Boolean

    #--function that checks if a row has exactly one assigned column
    declare assigned: [Row] -> Boolean    

    #--function that finds the index of the first unassigned row
    declare unassigned: [Matrix] -> N

    define [M M_tail row]:= [?M:Matrix ?M_tail:Matrix ?row:Row]

#---------------------------------------------------------------------------
#****************************************************************************
  #-- membership operator in-Matrix

  declare in-Matrix : (Row) [Row Matrix]-> Boolean

  assert* empty-Matrix :=
          (~ (in-Matrix ?r:Row nilM))

  assert* nonempty-Matrix :=
          ((in-Matrix ?r:Row (consM ?h:Row ?tail:Matrix)) <==> ?r:Row = ?h:Row | (in-Matrix ?r:Row ?tail:Matrix) )
#****************************************************************************
#****************************************************************************
  assert complete-axioms :=
  (fun
  [
   (complete M) =
      [
       true  when (forall row . ((in-Matrix row M) & (assigned row)) )
       false when (~(forall row . ((in-Matrix row M) & (assigned row)) ))
      ]
  ])

  define [complete-true complete-false] := complete-axioms

#--------------------------------------------------------------------------



}#module Matrix