load "lib/main/nat-plus"
load "lib/main/nat-minus"
load "lib/main/nat-less"
load "types"
load "v-list"
load "matrix"
load "nmac"
load "real"

extend-module NMAC{

#****************************************************************************
#---------------------------------------------------------------------------


#****************************************************************************
  #-- a function that takes a flightplan fa and a time and 
  #-- returns the configuration of the aircraft at that time 

  declare get-config: [Flightplan Real] -> Configuration

  #-- for empty flightplan
  assert* get-config-axiom1 :=
  ((get-config nilF time) = (config 0.0 0.0 0.0 0.0 0.0 0.0 0.0) )

  #-- for unary flightplan
  assert* get-config-axiom2 :=
  let{
      sa := (vec_2d sxa sya);
      vxa := (vga * (Real.cos ha));
      vya := (vga * (Real.sin ha));
      va := (vec_2d vxa vya);
      sa_time := (Vector_2d.+ sa (Vector_2d.* va (time - ta) )); 
      sza_time := (sza + (vza * (time - ta) )); 
      new_config := (config (Vector_2d.getx sa_time) (Vector_2d.gety sa_time) sza_time vga ha vza time)
     }
  ( (ta <= time ) ==> (get-config (consF (config sxa sya sza vga ha vza ta) nilF) time) = new_config)
  
  #-- for unary flightplan
  assert* get-config-axiom3 :=
  let{
      sa := (vec_2d sxa sya);
      vxa := (vga * (Real.cos ha));
      vya := (vga * (Real.sin ha));
      va := (vec_2d vxa vya);
      sa_time := (Vector_2d.+ sa (Vector_2d.* va (time - ta) )); 
      sza_time := (sza + (vza * (time - ta) )); 
      new_config := (config (Vector_2d.getx sa_time) (Vector_2d.gety sa_time) sza_time vga ha vza time)
     }
  ( ~(ta <= time ) ==> (get-config (consF (config sxa sya sza vga ha vza ta) nilF) time) = (config 0.0 0.0 0.0 0.0 0.0 0.0 0.0))

#!!! The below lines make the code slow and take forever

  #-- for normal flightplan
#  assert* get-config-axiom4 :=
#  let{ 
#      config_i := (config sxa sya sza vga ha vza ta);
#      config_i+1 := (config sxa2 sya2 sza2 vga2 ha2 vza2 ta2); 
#      tail_plan := (consF config_i+1 fp);
#      plan := (consF config_i tail_plan);
#      sa := (vec_2d sxa sya);
#      vxa := (vga * (Real.cos ha));
#      vya := (vga * (Real.sin ha));
#      va := (vec_2d vxa vya);
#      sa_time := (Vector_2d.+ sa (Vector_2d.* va (time - ta) )); 
#      sza_time := (sza + (vza * (time - ta) )); 
#      new_config := (config (Vector_2d.getx sa_time) (Vector_2d.gety sa_time) sza_time vga ha vza time)
 #     }    
 # (
 # (ta <= time & time < ta2) ==> 
 # ((get-config plan time) = new_config) 
 # )


  #-- for normal flightplan
#  assert* get-config-axiom5 :=
#  let{ 
#      config_i := (config sxa sya sza vga ha vza ta);
#      config_i+1 := (config sxa2 sya2 sza2 vga2 ha2 vza2 ta2); 
#      tail_plan := (consF config_i+1 fp);
#      plan := (consF config_i tail_plan);
#      sa := (vec_2d sxa sya);
#      vxa := (vga * (Real.cos ha));
#      vya := (vga * (Real.sin ha));
#      va := (vec_2d vxa vya);
#      sa_time := (Vector_2d.+ sa (Vector_2d.* va (time - ta) )); 
#      sza_time := (sza + (vza * (time - ta) )); 
#      new_config := (config (Vector_2d.getx sa_time) (Vector_2d.gety sa_time) sza_time vga ha vza time)
#      }    
#  (
# ~ (ta <= time & time < ta2) ==> 
#  ((get-config plan time) = (get-config tail_plan time) ) 
# )


  #-- for normal flightplan
  assert* get-config-axiom4 :=
  let{ 
      tail_plan := (consF config_i+1 fp);
      plan := (consF config_i tail_plan);
      sxa := (Configuration.getsx config_i);
      sya := (Configuration.getsy config_i);
      vga := (Configuration.getvg config_i);
      ha := (Configuration.geth config_i);
      ta := (Configuration.gettime config_i);
      sa := (vec_2d sxa sya);
      vxa := (vga * (Real.cos ha));
      vya := (vga * (Real.sin ha));
      va := (vec_2d vxa vya);
      sa_time := (Vector_2d.+ sa (Vector_2d.* va (time - ta) )); 
      sza_time := (sza + (vza * (time - ta) )); 
      new_config := (config (Vector_2d.getx sa_time) (Vector_2d.gety sa_time) sza_time vga ha vza time)
      }    
  (
  (ta <= time & time < ta2) ==> 
  ((get-config plan time) = new_config) 
  )


  #-- for normal flightplan
  assert* get-config-axiom5 :=
  let{ 
      tail_plan := (consF config_i+1 fp);
      plan := (consF config_i tail_plan);
      ta := (Configuration.gettime config_i);
      ta2 := (Configuration.gettime config_i+1)
      }    
  (
  (ta <= time & time < ta2) ==> 
  ((get-config plan time) = (get-config tail_plan time) ) 
  )

#----------------------------------------------------------------------------

#****************************************************************************
  #-- takes two times, two flightplans and detects H and D violations
  
  declare exists-violation: [Real Real Flightplan Flightplan Real Real] -> Boolean

  assert exists-violation-axioms :=
  let{ 
      config_A_t := (get-config fa t);
      config_B_t := (get-config fb t);
      vgAt := (Configuration.getvg config_A_t);
      hAt := (Configuration.geth config_A_t);
      vxAt := (vgAt * (Real.cos hAt));
      vyAt := (vgAt * (Real.sin hAt));
      vgBt := (Configuration.getvg config_B_t);
      hBt := (Configuration.geth config_B_t);
      vxBt := (vgBt * (Real.cos hBt));
      vyBt := (vgBt * (Real.sin hBt));
      sxyAt := (vec_2d (Configuration.getsx config_A_t) (Configuration.getsy config_A_t)); 
      sxyBt := (vec_2d (Configuration.getsx config_B_t) (Configuration.getsy config_B_t));
      vxyAt := (vec_2d vxAt vyAt);
      vxyBt := (vec_2d vxBt vyBt);
      sxyt := (Vector_2d.- sxyAt sxyBt);
      vxyt := (Vector_2d.- vxyAt vxyBt);
      szt := ((Configuration.getsx config_A_t) - (Configuration.getsx config_B_t));
      vzt := ((Configuration.getvz config_A_t) - (Configuration.getvz config_B_t));
      sxy_time := (Vector_2d.+ sxyt (Vector_2d.* vxyt (time - t)) );
      sz_time := (szt + ((time - t) * vzt));
      horiz_sep := (Vector_2d.NORM sxy_time);
      vert_sep := sz_time
      }
  (fun
  [
   (exists-violation t t2 fa fb D H) =
      [
       true  when (exists time . (t < time & time <= t2) & (horiz_sep < D) & (vert_sep < H))
       false when (~ (exists time . (t < time & time <= t2) & (horiz_sep < D) & (vert_sep < H)))       
      ]
  ])
  
    define [exists-violation-true exists-violation-false] := exists-violation-axioms

#----------------------------------------------------------------------------

#****************************************************************************
  #-- takes a lis of times, two flightplans and detects H and D violations
  #-- between each consecutive pair of times
  
  declare T-violation: [Time-list Flightplan Flightplan Real Real] -> Boolean


  assert T-violation-axioms :=
  let{ 
       T2 := (consTl t2 t_list);
       T := (consTl t T2)
       }
  (fun
  [
   (T-violation nilTl fa fb D H) = false
   (T-violation T fa fb D H) =
      [
       true  when (exists-violation t t2 fa fb D H)
       (T-violation T2 fa fb D H) when (~ (exists-violation t t2 fa fb D H))
      ]
  ])

  define [T-violation-empty T-violation-true T-violation-next] := T-violation-axioms

#----------------------------------------------------------------------------

}#extend-module NMAC